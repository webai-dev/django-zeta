# pylint:disable=too-many-lines
import graphene
from graphql_relay.node.node import from_global_id
from languages_plus.models import Language

from ery_backend.actions.factories import ActionFactory
from ery_backend.base.testcases import GQLTestCase
from ery_backend.base.utils import get_gql_id
from ery_backend.frontends.models import Frontend
from ery_backend.modules.factories import ModuleDefinitionFactory
from ery_backend.mutations import (
    CommandMutation,
    CommandTemplateMutation,
    CommandTemplateBlockMutation,
    CommandTemplateBlockTranslationMutation,
)
from ery_backend.roles.utils import grant_role
from ery_backend.templates.factories import TemplateFactory
from ery_backend.users.schema import ViewerQuery

from ..factories import (
    CommandFactory,
    CommandTemplateFactory,
    CommandTemplateBlockFactory,
    CommandTemplateBlockTranslationFactory,
)
from ..models import Command, CommandTemplate, CommandTemplateBlock, CommandTemplateBlockTranslation
from ..schema import (
    CommandQuery,
    CommandTemplateQuery,
    CommandTemplateBlockQuery,
    CommandTemplateBlockTranslationQuery,
)


class TestQuery(
    CommandQuery,
    CommandTemplateQuery,
    CommandTemplateBlockQuery,
    CommandTemplateBlockTranslationQuery,
    ViewerQuery,
    graphene.ObjectType,
):
    pass


class TestMutation(
    CommandMutation,
    CommandTemplateMutation,
    CommandTemplateBlockMutation,
    CommandTemplateBlockTranslationMutation,
    graphene.ObjectType,
):
    pass


class TestReadCommand(GQLTestCase):
    """Ensure reading Command works"""

    node_name = "CommandNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery))

    @classmethod
    def setUpClass(cls, *args, **kwargs):
        super().setUpClass(*args, **kwargs)
        cls.all_query = """{viewer{ allCommands{ edges{ node{ id action{ id } }}}}}"""
        cls.node_query = """query CommandQuery($commandid: ID!){
            viewer{ command(id: $commandid){ id moduleDefinition{ id } action{ id }}}}"""

    def setUp(self):
        self.module_definition = ModuleDefinitionFactory()
        self.command = CommandFactory(module_definition=self.module_definition)
        self.td = {"commandid": self.command.gql_id, 'module_definition': self.module_definition.gql_id}

    def test_read_all_requires_login(self):
        """allCommands query without a user is unauthorized"""
        result = self.gql_client.execute(self.all_query)
        self.assert_query_was_unauthorized(result)

    def test_read_node_requires_login(self):
        result = self.gql_client.execute(self.node_query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

    def test_read_all_filters_by_privilege(self):
        # for assignments to default commands made during module definition creation
        # signal created commands are not deleted by default
        module_definitions = [ModuleDefinitionFactory() for _ in range(3)]
        Command.objects.all().delete()  # default commands generated by module_definitions
        commands = [CommandFactory(module_definition=module_definitions[i]) for i in range(3)]

        for obj in commands:
            grant_role(self.viewer["role"], obj.get_privilege_ancestor(), self.viewer["user"])

        for obj in commands[1:]:
            grant_role(self.editor["role"], obj.get_privilege_ancestor(), self.editor["user"])

        grant_role(self.owner["role"], commands[2].get_privilege_ancestor(), self.owner["user"])
        # No roles
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.no_roles["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["viewer"]["allCommands"]["edges"]), 0)

        # Viewer
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.viewer["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["viewer"]["allCommands"]["edges"]), 3)

        # Editor
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.editor["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["viewer"]["allCommands"]["edges"]), 2)

        # Owner
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.owner["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["viewer"]["allCommands"]["edges"]), 1)

    def test_read_node_works(self):
        grant_role(self.viewer["role"], self.command.get_privilege_ancestor(), self.viewer["user"])
        result = self.gql_client.execute(
            self.node_query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        self.fail_on_errors(result)
        self.assertEqual(int(from_global_id(result["data"]["viewer"]["command"]["id"])[1]), self.command.id)
        self.assertEqual(
            int(from_global_id(result["data"]["viewer"]["command"]["moduleDefinition"]["id"])[1]),
            self.command.module_definition.id,
        )

    def test_child_connections(self):
        grant_role(self.viewer['role'], self.command.get_privilege_ancestor(), self.viewer['user'])
        CommandTemplateFactory(command=self.command)
        query = """query CommandQuery($commandid: ID!){
            viewer{ command(id: $commandid){ commandTemplates{ edges{ node{ id }}}}}}"""
        result = self.gql_client.execute(
            query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        children_gql_ids = [command_template.gql_id for command_template in self.command.command_templates.all()]
        data = [node_data['node']['id'] for node_data in result['data']["viewer"]['command']['commandTemplates']['edges']]
        for child_id in children_gql_ids:
            self.assertIn(child_id, data)


class TestCreateCommand(GQLTestCase):
    node_name = "CommandNode"

    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    def setUp(self):
        self.module_definition = ModuleDefinitionFactory()
        self.action = ActionFactory(module_definition=self.module_definition)
        self.td = {'moduleDefinition': self.module_definition.gql_id, 'name': 'testcommand', 'action': self.action.gql_id}

        self.query = """
mutation ($moduleDefinition: ID!, $name: String!, $action: ID) {
    createCommand(input: {
        moduleDefinition: $moduleDefinition,
        action: $action
        name: $name
    }) {
        commandEdge {
            node {
                id
                action {
                    id
                }
            }
        }
    }
}
        """

    def test_create_requires_privilege(self):
        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

        self.assertRaises(Command.DoesNotExist, Command.objects.get, **{"name": self.td["name"]})

    def test_create_produces_result(self):
        grant_role(self.owner["role"], self.module_definition, self.owner["user"])
        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        lookup = Command.objects.get(name=self.td["name"])

        self.assertEqual(lookup.name, self.td["name"])
        self.assertEqual(lookup.module_definition, self.module_definition)


class TestUpdateCommand(GQLTestCase):
    node_name = "CommandNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    def setUp(self):
        self.command = CommandFactory()
        self.action = ActionFactory(module_definition=self.command.module_definition)
        self.td = {
            "action": self.action.gql_id,
            "command": self.command.gql_id,
            "name": "test_command",
            "comment": "test the new comment",
        }
        self.query = """mutation ($command: ID!, $name: String!, $action: ID, $comment: String){
             updateCommand(input: {
                id: $command,
                name: $name,
                action: $action,
                comment: $comment
                    })
                   {command
                   {id action{ id }}}}
                """

    def test_update_requires_privilege(self):
        grant_role(self.viewer["role"], self.command.get_privilege_ancestor(), self.viewer["user"])

        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

    def test_update_produces_result(self):
        grant_role(self.owner["role"], self.command.get_privilege_ancestor(), self.owner["user"])

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        lookup = Command.objects.get(pk=self.command.id)

        self.assertEqual(lookup.name, self.td["name"])
        self.assertEqual(lookup.action, self.action)
        self.assertEqual(lookup.comment, self.td["comment"])


class TestDeleteCommand(GQLTestCase):
    node_name = "CommandNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    def setUp(self):
        self.command = CommandFactory()
        self.td = {"command": self.command.gql_id}
        self.query = """mutation ($command: ID!){
             deleteCommand(input: {
                id: $command,
                    })
                   { id }
                   }
                """

    def test_delete_requires_privilege(self):
        grant_role(self.viewer["role"], self.command.get_privilege_ancestor(), self.viewer["user"])

        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        self.assert_query_was_unauthorized(result)

        Command.objects.get(pk=self.command.id)

    def test_delete_produces_result(self):
        grant_role(self.owner["role"], self.command.get_privilege_ancestor(), self.owner["user"])

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        self.assertIsNotNone(result["data"]["deleteCommand"]["id"])

        self.assertRaises(Command.DoesNotExist, Command.objects.get, **{"pk": self.command.id})


class TestReadCommandTemplate(GQLTestCase):
    """Ensure reading CommandTemplate works"""

    node_name = "CommandTemplateNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery))

    @classmethod
    def setUpClass(cls, *args, **kwargs):
        super().setUpClass(*args, **kwargs)
        cls.all_query = """{allCommandTemplates{ edges{ node{ id command{ id } template{ id }}}}}"""
        cls.node_query = """query CommandTemplateQuery($commandtemplateid: ID!){
            commandTemplate(id: $commandtemplateid){ id command{ id } template{ id}}}"""

    def setUp(self):
        self.command = CommandFactory()
        self.template = TemplateFactory()
        self.command_template = CommandTemplateFactory(command=self.command, template=self.template)
        self.td = {
            "commandtemplateid": self.command_template.gql_id,
            'command': self.command.gql_id,
            'template': self.template.gql_id,
        }

    def test_read_all_requires_login(self):
        """allCommandTemplates query without a user is unauthorized"""
        result = self.gql_client.execute(self.all_query)
        self.assert_query_was_unauthorized(result)

    def test_read_node_requires_login(self):
        result = self.gql_client.execute(self.node_query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

    def test_read_all_filters_by_privilege(self):
        commands = [CommandFactory() for _ in range(3)]
        CommandTemplate.objects.all().delete()  # Remove outputs created by default with module definitions
        command_templates = [CommandTemplateFactory(command=commands[i]) for i in range(3)]

        for obj in command_templates:
            grant_role(self.viewer["role"], obj.get_privilege_ancestor(), self.viewer["user"])

        for obj in command_templates[1:]:
            grant_role(self.editor["role"], obj.get_privilege_ancestor(), self.editor["user"])

        grant_role(self.owner["role"], command_templates[2].get_privilege_ancestor(), self.owner["user"])
        # No roles
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.no_roles["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplates"]["edges"]), 0)

        # Viewer
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.viewer["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplates"]["edges"]), 3)

        # Editor
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.editor["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplates"]["edges"]), 2)

        # Owner
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.owner["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplates"]["edges"]), 1)

    def test_read_node_works(self):
        grant_role(self.viewer["role"], self.command_template.get_privilege_ancestor(), self.viewer["user"])
        result = self.gql_client.execute(
            self.node_query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        self.fail_on_errors(result)
        self.assertEqual(int(from_global_id(result["data"]["commandTemplate"]["id"])[1]), self.command_template.id)
        self.assertEqual(
            int(from_global_id(result["data"]["commandTemplate"]["command"]["id"])[1]), self.command_template.command.id
        )
        self.assertEqual(
            int(from_global_id(result["data"]["commandTemplate"]["template"]["id"])[1]), self.command_template.template.id
        )

    def test_child_connections(self):
        grant_role(self.viewer['role'], self.command_template.get_privilege_ancestor(), self.viewer['user'])
        CommandTemplateBlockFactory(command_template=self.command_template)
        query = """query CommandTemplateQuery($commandtemplateid: ID!){
            commandTemplate(id: $commandtemplateid){ blocks{ edges{ node{ id }}}}}"""
        result = self.gql_client.execute(
            query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        children_gql_ids = [block.gql_id for block in self.command_template.blocks.all()]
        data = [node_data['node']['id'] for node_data in result['data']['commandTemplate']['blocks']['edges']]
        for child_id in children_gql_ids:
            self.assertIn(child_id, data)


class TestCreateCommandTemplate(GQLTestCase):
    node_name = "CommandTemplateNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    def setUp(self):
        self.command = CommandFactory()
        self.template = TemplateFactory()
        self.td = {
            'command': self.command.gql_id,
            'template': self.template.gql_id,
        }

        self.query = """
mutation ($template: ID!, $command: ID!) {
    createCommandTemplate(input: {
        template: $template,
        command: $command
    }) {
        commandTemplateEdge {
            node {
                id
                template {
                    id
                }
                command {
                    id
                }
            }
        }
    }
}
"""

    def test_create_requires_privilege(self):
        grant_role(self.owner["role"], self.command.get_privilege_ancestor(), self.owner["user"])
        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

        self.assertRaises(CommandTemplate.DoesNotExist, CommandTemplate.objects.get, **{"template": self.template})

    def test_create_produces_result(self):
        grant_role(self.owner["role"], self.command.get_privilege_ancestor(), self.owner["user"])
        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        lookup = CommandTemplate.objects.get(template=self.template)

        self.assertEqual(lookup.command, self.command)


class TestDeleteCommandTemplate(GQLTestCase):
    node_name = "CommandTemplateNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    def setUp(self):
        self.command_template = CommandTemplateFactory()
        self.td = {"commandTemplate": self.command_template.gql_id}
        self.query = """mutation ($commandTemplate: ID!){
             deleteCommandTemplate(input: {
                id: $commandTemplate,
                    })
                   { id }
                   }
                """

    def test_delete_requires_privilege(self):
        grant_role(self.viewer["role"], self.command_template.get_privilege_ancestor(), self.viewer["user"])

        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        self.assert_query_was_unauthorized(result)

        CommandTemplate.objects.get(pk=self.command_template.id)

    def test_delete_produces_result(self):
        grant_role(self.owner["role"], self.command_template.get_privilege_ancestor(), self.owner["user"])

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        self.assertIsNotNone(result["data"]["deleteCommandTemplate"]["id"])

        self.assertRaises(CommandTemplate.DoesNotExist, CommandTemplate.objects.get, **{"pk": self.command_template.id})


class TestReadCommandTemplateBlock(GQLTestCase):
    """Ensure reading CommandTemplateBlock works"""

    node_name = "CommandTemplateBlockNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery))

    @classmethod
    def setUpClass(cls, *args, **kwargs):
        super().setUpClass(*args, **kwargs)
        cls.all_query = """{allCommandTemplateBlocks{ edges{ node{ id commandTemplate{ id }}}}}"""
        cls.node_query = """query CommandTemplateBlockQuery($commandtemplateblockid: ID!){
            commandTemplateBlock(id: $commandtemplateblockid){ id commandTemplate{ id }}}"""

    def setUp(self):
        self.command_template = CommandTemplateFactory()
        self.command_template_block = CommandTemplateBlockFactory(command_template=self.command_template)
        self.td = {
            "commandtemplateblockid": self.command_template_block.gql_id,
            "commandTemplate": self.command_template.gql_id,
        }

    def test_read_all_requires_login(self):
        """allCommandTemplateBlocks query without a user is unauthorized"""
        result = self.gql_client.execute(self.all_query)
        self.assert_query_was_unauthorized(result)

    def test_read_node_requires_login(self):
        result = self.gql_client.execute(self.node_query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

    def test_read_all_filters_by_privilege(self):
        command_templates = [CommandTemplateFactory() for _ in range(3)]
        CommandTemplateBlock.objects.all().delete()  # Defaults created with command_templates
        command_template_blocks = [CommandTemplateBlockFactory(command_template=command_templates[i]) for i in range(3)]

        for obj in command_template_blocks:
            grant_role(self.viewer["role"], obj.get_privilege_ancestor(), self.viewer["user"])

        for obj in command_template_blocks[1:]:
            grant_role(self.editor["role"], obj.get_privilege_ancestor(), self.editor["user"])

        grant_role(self.owner["role"], command_template_blocks[2].get_privilege_ancestor(), self.owner["user"])
        # No roles
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.no_roles["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplateBlocks"]["edges"]), 0)

        # Viewer
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.viewer["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplateBlocks"]["edges"]), 3)

        # Editor
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.editor["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplateBlocks"]["edges"]), 2)

        # Owner
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.owner["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplateBlocks"]["edges"]), 1)

    def test_read_node_works(self):
        grant_role(self.viewer["role"], self.command_template_block.get_privilege_ancestor(), self.viewer["user"])
        result = self.gql_client.execute(
            self.node_query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        self.fail_on_errors(result)
        self.assertEqual(int(from_global_id(result["data"]["commandTemplateBlock"]["id"])[1]), self.command_template_block.id)
        self.assertEqual(
            int(from_global_id(result["data"]["commandTemplateBlock"]["commandTemplate"]["id"])[1]),
            self.command_template_block.command_template.id,
        )

    def test_child_connections(self):
        grant_role(self.viewer['role'], self.command_template_block.get_privilege_ancestor(), self.viewer['user'])
        CommandTemplateBlockTranslationFactory(command_template_block=self.command_template_block)
        query = """query CommandTemplateBlockQuery($commandtemplateblockid: ID!){
            commandTemplateBlock(id: $commandtemplateblockid){ translations{ edges{ node{ id }}}}}"""
        result = self.gql_client.execute(
            query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        children_gql_ids = [translation.gql_id for translation in self.command_template_block.translations.all()]
        data = [node_data['node']['id'] for node_data in result['data']['commandTemplateBlock']['translations']['edges']]
        for child_id in children_gql_ids:
            self.assertIn(child_id, data)


class TestCreateCommandTemplateBlock(GQLTestCase):
    node_name = "CommandTemplateBlockNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    def setUp(self):
        self.command_template = CommandTemplateFactory()
        self.td = {
            "commandTemplate": self.command_template.gql_id,
            "name": "CommandTemplateBlock",
            "comment": "command template block test",
        }

        self.query = """
mutation ($commandTemplate: ID!, $name: String!, $comment: String) {
    createCommandTemplateBlock(input: {
        commandTemplate: $commandTemplate
        name: $name
        comment: $comment
    }) {
        commandTemplateBlockEdge {
            node {
                id
                commandTemplate {
                    id
                }
            }
        }
    }
}
"""

    def test_create_requires_privilege(self):
        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

        self.assertRaises(CommandTemplateBlock.DoesNotExist, CommandTemplateBlock.objects.get, **{"name": self.td["name"]})

    def test_create_produces_result(self):
        grant_role(self.owner["role"], self.command_template.get_privilege_ancestor(), self.owner["user"])
        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        lookup = CommandTemplateBlock.objects.get(name=self.td["name"])

        self.assertEqual(lookup.name, self.td["name"])
        self.assertEqual(lookup.comment, self.td["comment"])
        self.assertEqual(lookup.command_template, self.command_template)


class TestUpdateCommandTemplateBlock(GQLTestCase):
    node_name = "CommandTemplateBlockNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    def setUp(self):
        self.command_template_block = CommandTemplateBlockFactory()
        self.td = {
            "commandTemplateBlock": self.command_template_block.gql_id,
            "name": "UpdatedCommandTemplateBlock",
            "comment": "Updated command template block",
        }
        self.query = """mutation ($commandTemplateBlock: ID!, $name: String!, $comment: String){
             updateCommandTemplateBlock(input: {
                id: $commandTemplateBlock
                name: $name
                comment: $comment
                    })
                   {commandTemplateBlock
                   {id }}}
                """

    def test_update_requires_privilege(self):
        grant_role(self.viewer["role"], self.command_template_block.get_privilege_ancestor(), self.viewer["user"])

        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

    def test_update_produces_result(self):
        grant_role(self.owner["role"], self.command_template_block.get_privilege_ancestor(), self.owner["user"])

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        lookup = CommandTemplateBlock.objects.get(pk=self.command_template_block.id)

        self.assertEqual(lookup.name, self.td["name"])
        self.assertEqual(lookup.comment, self.td["comment"])


class TestDeleteCommandTemplateBlock(GQLTestCase):
    node_name = "CommandTemplateBlockNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    def setUp(self):
        self.command_template_block = CommandTemplateBlockFactory()
        self.td = {"commandTemplateBlock": self.command_template_block.gql_id}
        self.query = """mutation ($commandTemplateBlock: ID!){
             deleteCommandTemplateBlock(input: {
                id: $commandTemplateBlock,
                    })
                   { id }
                   }
                """

    def test_delete_requires_privilege(self):
        grant_role(self.viewer["role"], self.command_template_block.get_privilege_ancestor(), self.viewer["user"])

        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        self.assert_query_was_unauthorized(result)

        CommandTemplateBlock.objects.get(pk=self.command_template_block.id)

    def test_delete_produces_result(self):
        grant_role(self.owner["role"], self.command_template_block.get_privilege_ancestor(), self.owner["user"])

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        self.assertTrue(result["data"]["deleteCommandTemplateBlock"]["id"])

        self.assertRaises(
            CommandTemplateBlock.DoesNotExist, CommandTemplateBlock.objects.get, **{"pk": self.command_template_block.id}
        )


class TestReadCommandTemplateBlockTranslation(GQLTestCase):
    """Ensure reading CommandTemplateBlockTranslation works"""

    node_name = "CommandTemplateBlockTranslationNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery))

    @classmethod
    def setUpClass(cls, *args, **kwargs):
        super().setUpClass(*args, **kwargs)
        cls.frontend = Frontend.objects.get(name='Web')
        cls.language = Language.objects.get(pk='en')
        cls.all_query = """
{
    allCommandTemplateBlockTranslations {
        edges {
            node {
                id
                commandTemplateBlock {
                    id
                }
                frontend {
                    id
                }
                language {
                    iso6391
                }
            }
        }
    }
}
"""
        cls.node_query = """
query CommandTemplateBlockTranslationQuery($commandTemplateBlockTranslationid: ID!) {
    commandTemplateBlockTranslation(id: $commandTemplateBlockTranslationid) {
        id
        commandTemplateBlock {
            id
        }
        frontend {
            id
        }
        language {
            iso6391
        }
    }
}
"""

    def setUp(self):
        self.ctb = CommandTemplateBlockFactory()
        self.ctb_translation = CommandTemplateBlockTranslationFactory(command_template_block=self.ctb)
        self.td = {"commandTemplateBlockTranslationid": self.ctb_translation.gql_id, "commandTemplateBlock": self.ctb.gql_id}

    def test_read_all_requires_login(self):
        """allCommandTemplateBlockTranslations query without a user is unauthorized"""
        result = self.gql_client.execute(self.all_query)
        self.assert_query_was_unauthorized(result)

    def test_read_node_requires_login(self):
        result = self.gql_client.execute(self.node_query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

    def test_read_all_filters_by_privilege(self):
        command_template_blocks = [CommandTemplateBlockFactory() for _ in range(3)]
        CommandTemplateBlockTranslation.objects.all().delete()  # Defaults created with ancestral ModuleDefinitions
        ctb_translations = [
            CommandTemplateBlockTranslationFactory(command_template_block=command_template_blocks[i]) for i in range(3)
        ]

        for obj in ctb_translations:
            grant_role(self.viewer["role"], obj.get_privilege_ancestor(), self.viewer["user"])

        for obj in ctb_translations[1:]:
            grant_role(self.editor["role"], obj.get_privilege_ancestor(), self.editor["user"])

        grant_role(self.owner["role"], ctb_translations[2].get_privilege_ancestor(), self.owner["user"])
        # No roles
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.no_roles["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplateBlockTranslations"]["edges"]), 0)

        # Viewer
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.viewer["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplateBlockTranslations"]["edges"]), 3)

        # Editor
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.editor["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplateBlockTranslations"]["edges"]), 2)

        # Owner
        result = self.gql_client.execute(self.all_query, context_value=self.gql_client.get_context(user=self.owner["user"]))
        self.fail_on_errors(result)
        self.assertEqual(len(result["data"]["allCommandTemplateBlockTranslations"]["edges"]), 1)

    def test_read_node_works(self):
        grant_role(self.viewer["role"], self.ctb_translation.get_privilege_ancestor(), self.viewer["user"])
        result = self.gql_client.execute(
            self.node_query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        self.fail_on_errors(result)
        self.assertEqual(
            int(from_global_id(result["data"]["commandTemplateBlockTranslation"]["id"])[1]), self.ctb_translation.id
        )
        block_result = result["data"]["commandTemplateBlockTranslation"]["commandTemplateBlock"]["id"]
        self.assertEqual(int(from_global_id(block_result)[1]), self.ctb_translation.command_template_block.id)
        self.assertEqual(
            int(from_global_id(result["data"]["commandTemplateBlockTranslation"]["frontend"]["id"])[1]),
            self.ctb_translation.frontend.id,
        )
        self.assertEqual(
            result["data"]["commandTemplateBlockTranslation"]["language"]["iso6391"], self.ctb_translation.language.iso_639_1
        )


class TestCreateCommandTemplateBlockTranslation(GQLTestCase):
    node_name = "CommandTemplateBlockTranslationNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    @classmethod
    def setUpClass(cls, *args, **kwargs):
        super().setUpClass(*args, **kwargs)
        cls.frontend = Frontend.objects.get(name='Web')
        cls.language = Language.objects.get(pk='en')

    def setUp(self):
        self.command_template_block = CommandTemplateBlockFactory()
        self.td = {
            "frontend": self.frontend.gql_id,
            "language": get_gql_id('Language', self.language.pk),
            "commandTemplateBlock": self.command_template_block.gql_id,
            "content": "Testing creation of CommandTemplateBlockTranslation",
        }

        self.query = """
mutation ($commandTemplateBlock: ID!, $frontend: ID!, $language: ID!, $content: String!) {
    createCommandTemplateBlockTranslation(input: {
        commandTemplateBlock: $commandTemplateBlock
        language: $language
        content: $content
        frontend: $frontend
    }) {
        commandTemplateBlockTranslationEdge {
            node {
                id
                commandTemplateBlock {
                    id
                }
                frontend {
                    id
                }
                language {
                    iso6391
                }
            }
        }
    }
}
"""

    def test_create_requires_privilege(self):
        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

        self.assertRaises(
            CommandTemplateBlockTranslation.DoesNotExist,
            CommandTemplateBlockTranslation.objects.get,
            **{"content": self.td["content"]},
        )

    def test_create_produces_result(self):
        grant_role(self.owner["role"], self.command_template_block.get_privilege_ancestor(), self.owner["user"])
        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        lookup = CommandTemplateBlockTranslation.objects.get(content=self.td["content"])

        self.assertEqual(lookup.command_template_block, self.command_template_block)
        self.assertEqual(lookup.frontend, self.frontend)
        self.assertEqual(lookup.language, self.language)


class TestUpdateCommandTemplateBlockTranslation(GQLTestCase):
    node_name = "CommandTemplateBlockTranslationNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    @classmethod
    def setUpClass(cls, *args, **kwargs):
        super().setUpClass(*args, **kwargs)
        cls.web = Frontend.objects.get(name='Web')
        cls.sms = Frontend.objects.get(name='SMS')
        cls.language = Language.objects.get(pk='en')

    def setUp(self):
        self.ctb_translation = CommandTemplateBlockTranslationFactory(frontend=self.web)
        self.td = {
            "commandTemplateBlockTranslation": self.ctb_translation.gql_id,
            "frontend": self.sms.gql_id,
            "content": "Testing update of CommandTemplateBlockTranslation",
        }
        self.query = """mutation ($commandTemplateBlockTranslation: ID!, $content: String!, $frontend: ID!){
             updateCommandTemplateBlockTranslation(input: {
                id: $commandTemplateBlockTranslation,
                content: $content
                frontend: $frontend
                    })
                   {commandTemplateBlockTranslation
                   {id frontend{ id }}}}
                """

    def test_update_requires_privilege(self):
        grant_role(self.viewer["role"], self.ctb_translation.get_privilege_ancestor(), self.viewer["user"])

        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

    def test_update_produces_result(self):
        grant_role(self.owner["role"], self.ctb_translation.get_privilege_ancestor(), self.owner["user"])

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        lookup = CommandTemplateBlockTranslation.objects.get(pk=self.ctb_translation.id)

        self.assertEqual(lookup.content, self.td["content"])
        self.assertEqual(lookup.frontend, self.sms)


class TestDeleteCommandTemplateBlockTranslation(GQLTestCase):
    node_name = "CommandTemplateBlockTranslationNode"
    gql_client = GQLTestCase.get_gql_client(graphene.Schema(query=TestQuery, mutation=TestMutation))

    def setUp(self):
        self.ctb_translation = CommandTemplateBlockTranslationFactory()
        self.td = {"commandTemplateBlockTranslation": self.ctb_translation.gql_id}
        self.query = """mutation ($commandTemplateBlockTranslation: ID!){
             deleteCommandTemplateBlockTranslation(input: {
                id: $commandTemplateBlockTranslation,
                    })
                   { id }
                   }
                """

    def test_delete_requires_privilege(self):
        grant_role(self.viewer["role"], self.ctb_translation.get_privilege_ancestor(), self.viewer["user"])

        result = self.gql_client.execute(self.query, variable_values=self.td)
        self.assert_query_was_unauthorized(result)

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.viewer["user"])
        )
        self.assert_query_was_unauthorized(result)

        CommandTemplateBlockTranslation.objects.get(pk=self.ctb_translation.id)

    def test_delete_produces_result(self):
        grant_role(self.owner["role"], self.ctb_translation.get_privilege_ancestor(), self.owner["user"])

        result = self.gql_client.execute(
            self.query, variable_values=self.td, context_value=self.gql_client.get_context(user=self.owner["user"])
        )
        self.fail_on_errors(result)

        self.assertIsNotNone(result["data"]["deleteCommandTemplateBlockTranslation"]["id"])

        self.assertRaises(
            CommandTemplateBlockTranslation.DoesNotExist,
            CommandTemplateBlockTranslation.objects.get,
            **{"pk": self.ctb_translation.id},
        )

        self.ctb_translation = CommandTemplateBlockTranslationFactory()
        self.td = {
            "ctbtranslationid": self.ctb_translation.gql_id,
        }
